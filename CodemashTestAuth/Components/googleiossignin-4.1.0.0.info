{"Name":"Google Sign-In for iOS","Id":3755,"Alias":"googleiossignin","Description":"\nGoogle Sign-In is a secure authentication system that reduces the burden of login for your users, by enabling them to sign in with their Google account—the same account they already use with Gmail, Play, Google+, and other Google services.\n\nGoogle Sign-In is also your gateway to connecting with Google’s users and services in a secure manner. You can give your users the opportunity to pay with Android Pay, share with their Google-wide contacts, save a file to Drive, add an event to Calendar, and more. Integrate Google’s user-centric APIs and services inside your app to help your users take action and convert.","Version":"4.1.0.0","Summary":"Get users into your apps quickly and securely, using a registration system they already use and trust.","QuickStart":"Configuring your App\n--------------------\n\nGoogle provides an easy to use configuration web tool to generate a config file for your app:  \n\n1. Open [Google\u0027s configuration tool][1] to create a config file for your app.\n2. Enter your app\u0027s name and iOS Bundle ID and click continue\n3. Click *Enable Sign-In*\n4. Click *continue* to generate the configuration files\n5. Click *Download Google-Service-Info.plist*\n6. Add `GoogleService-Info.plist` to your Xamarin.iOS app project and set the *Build Action* to `BundleResource`\n7. In your Xamarin.iOS app project\u0027s `Info.plist` file, add the following URL Types:\n  - Role: `Editor` URL Schemes: `your.app.bundle.id` \n  - Role: `Editor` URL Schemes: `value of REVERSED_CLIENT_ID from GoogleService-Info.plist`\n  \nSetup your AppDelegate\n----------------------\n\nIn order for Sign-In to work properly, you must tell the SDK about some of your application lifecycle events.\n\nIn your `AppDelegate.cs`, in the `FinishedLaunching (..)` override, you should add the following code to the start of the method:\n\n``` csharp\npublic override bool FinishedLaunching (UIApplication application, NSDictionary launchOptions)\n{\n\t...\n\n\t// You can get the GoogleService-Info.plist file at https://developers.google.com/mobile/add\n\tvar googleServiceDictionary = NSDictionary.FromFile (\"GoogleService-Info.plist\");\n\tSignIn.SharedInstance.ClientID = googleServiceDictionary [\"CLIENT_ID\"].ToString ();\n\n\t...\n\n\treturn true;\n}\n```\n\nNext, you will need to override the `OpenUrl` method in your `AppDelegate` class or, if it already exists, add the code inside the method to the existing implementation:\n\n``` csharp\n// For iOS 9 or newer\npublic override bool OpenUrl (UIApplication app, NSUrl url, NSDictionary options)\n{\n\tvar openUrlOptions = new UIApplicationOpenUrlOptions (options);\n\treturn SignIn.SharedInstance.HandleUrl (url, openUrlOptions.SourceApplication, openUrlOptions.Annotation);\n}\n\n// For iOS 8 and older\npublic override bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)\n{\n\treturn SignIn.SharedInstance.HandleUrl (url, sourceApplication, annotation);\n}\n```\n\nSigning In\n----------\n\nGoogle Sign-In provides a `SignInButton` to add to your views and handles starting the sign in process. You can add the button to your app in code or by using storyboards:\n\n``` csharp\nSignInButton = new SignInButton ();\nSignInButton.Frame = new CGRect (20, 100, 150, 44);\nView.AddSubview (SignInButton);\n\n// Assign the SignIn Delegates to receive callbacks\nSignIn.SharedInstance.UIDelegate = this;\nSignIn.SharedInstance.Delegate = this;\n```\n\nYou also must implement `ISignInDelegate` as well as `ISignInUIDelegate` and provide a `DidSignIn` method to know when the sign-in completed and if it was successful:\n\n``` csharp\npublic void DidSignIn (SignIn signIn, GoogleUser user, NSError error)\n{\n\tif (user != null \u0026\u0026 error == null)\n\t\t// Disable the SignInButton\n}\n```\n\n\u003e ***Note:*** *The Sign-In SDK automatically acquires access tokens, but the access tokens will be refreshed only when you call `SignIn` or `SignInSilently` methods. To explicitly refresh the access token, call the `RefreshTokens` method. If you need the access token and want the SDK to automatically handle refreshing it, you can use the `GetAccessToken` method.*\n\nThe `SignInUserSilently` method attempts to sign in a previously authenticated user without interaction. This can be done in a `ViewDidLoad` method or `ViewDidAppear` of your `UIViewController`:\n\n``` csharp\n// Assign the SignIn Delegates to receive callbacks\nSignIn.SharedInstance.UIDelegate = this;\nSignIn.SharedInstance.Delegate = this;\n\n// Sign the user in automatically\nSignIn.SharedInstance.SignInUserSilently ();\n```\n\n\u003e ***Note:*** *When users silently sign in, the Sign-In SDK automatically acquires access tokens and automatically refreshes them when necessary. If you need the access token and want the SDK to automatically handle refreshing it, you can use the `RefreshTokens` method. To explicitly refresh the access token, call the `RefreshAccessToken` method.*\n\nIf, in your project, the class that implements `ISignInUIDelegate` interface is not a subclass of `UIViewController`, you will need to implement the `WillDispatch`, `PresentViewController`, and `DismissViewController` methods of the `ISignInUIDelegate` interface. For example:\n\n```csharp\n[Export (\"signInWillDispatch:error:\")]\npublic void WillDispatch (SignIn signIn, NSError error)\n{\n\tmyActivityIndicator.StopAnimating ();\n}\n\n[Export (\"signIn:presentViewController:\")]\npublic void PresentViewController (SignIn signIn, UIViewController viewController)\n{\n\tPresentViewController (viewController, true, null);\n}\n\n[Export (\"signIn:dismissViewController:\")]\npublic void DismissViewController (SignIn signIn, UIViewController viewController)\n{\n\tDismissViewController (true, null);\n}\n```\n\nSigning Out and Disconnecting \n----------\n\nTo sign out a user simply call the `SignOutUser` method on the `SignIn` object:\n\n``` csharp\nSignOutButton.TouchUpInside += (sender, e) =\u003e {\n\tSignIn.SharedInstance.SignOutUser ();\n\n\tSignInButton.Enabled = true;\n\tSignOutButton.Enabled = false;\n};\n```\n\nTo completely disconnect the current user from the app and revoke previous authentication call the `DisconnectUser` method on the `SignIn` object.\n\nOptionally, you can provide a `DidDisconnect` method to know when the sign out was completed and if it was successful:\n\n```csharp\n[Export (\"signIn:didDisconnectWithUser:withError:\")]\npublic void DidDisconnect (SignIn signIn, GoogleUser user, NSError error)\n{\n\t// Perform any operations when the user disconnects from app here.\n}\n```\n\n[1]: https://developers.google.com/mobile/add?platform=ios\u0026cntapi=gcm\n","Hash":"11ff8ef7acbd967256ed9c82e473aad2","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}